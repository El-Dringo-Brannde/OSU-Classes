/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 14 17:36:38 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Cards;
import dominion.Player;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player("");
      player0.getNewDeck();
      assertEquals(0, player0.get_Player_Gold());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player("Ambassador");
      String string0 = player0.getName();
      assertEquals("Ambassador", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player("");
      String string0 = player0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Player.shuffle((List<Cards>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player("");
      // Undeclared exception!
      try { 
        player0.Play_Card((Cards) null, player0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player("Q[)g\"D^AjJVPa");
      // Undeclared exception!
      try { 
        player0.PayPiper((-2541));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((String) null);
      // Undeclared exception!
      try { 
        player0.Hand_To_Discard(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Player.Check_For_Action((Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player("UnYj'&P7*i8(Ue!(gL");
      int int0 = Player.Check_For_Action(player0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player("");
      Cards cards0 = new Cards("Garden", 0, (-897), "", (Boolean) null);
      player0.Play_Card(cards0, player0, player0);
      assertEquals(0, player0.get_Player_Gold());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player("");
      Boolean boolean0 = Boolean.valueOf(false);
      Cards cards0 = new Cards("Village", (-1170), (-333376442), "Village", boolean0);
      // Undeclared exception!
      try { 
        player0.Play_Card(cards0, player0, player0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player("+b/>E.fI");
      Boolean boolean0 = Boolean.valueOf(false);
      Cards cards0 = new Cards("CouncilRoom", 40, 0, "+b/>E.fI", boolean0);
      // Undeclared exception!
      try { 
        player0.Play_Card(cards0, player0, player0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player("#{Kd?8-~]DN{i");
      Boolean boolean0 = Boolean.valueOf("Adventurer");
      Cards cards0 = new Cards("Adventurer", 0, 0, "~63j7j\"^X", boolean0);
      player0.Play_Card(cards0, player0, player0);
      assertEquals(0, player0.get_Player_Gold());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player("AMlzU<Mi");
      Boolean boolean0 = Boolean.FALSE;
      Cards cards0 = new Cards("CutPurse", 0, 2125746773, "CutPurse", boolean0);
      // Undeclared exception!
      try { 
        player0.Play_Card(cards0, player0, player0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player("Workshop");
      Boolean boolean0 = Boolean.valueOf(false);
      Cards cards0 = new Cards("Workshop", 0, 0, "O", boolean0);
      // Undeclared exception!
      try { 
        player0.Play_Card(cards0, player0, player0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player("Feast");
      Boolean boolean0 = Boolean.valueOf(false);
      Cards cards0 = new Cards("Feast", (-971), 4, "~xkA", boolean0);
      // Undeclared exception!
      try { 
        player0.Play_Card(cards0, player0, player0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Player player0 = new Player("+b/>E.fI");
      Cards cards0 = new Cards("Baron", 0, (-1019), "CouncilRoom", boolean0);
      // Undeclared exception!
      try { 
        player0.Play_Card(cards0, player0, player0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player("Embargo");
      Boolean boolean0 = Boolean.FALSE;
      Cards cards0 = new Cards("Embargo", 2042020277, 2042020277, "E Ia", boolean0);
      // Undeclared exception!
      try { 
        player0.Play_Card(cards0, player0, player0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player("L2");
      Boolean boolean0 = new Boolean(true);
      Cards cards0 = new Cards("Mine", (-1726), (-1726), "L2", boolean0);
      player0.Play_Card(cards0, player0, player0);
      assertEquals(0, player0.get_Player_Gold());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player("GreatHall");
      Boolean boolean0 = new Boolean(false);
      Cards cards0 = new Cards("GreatHall", 0, (-333376442), "GreatHall", boolean0);
      // Undeclared exception!
      try { 
        player0.Play_Card(cards0, player0, player0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }


  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player("jRmBi|");
      Boolean boolean0 = Boolean.valueOf(false);
      Cards cards0 = new Cards("'.Q5", 156, 0, "xOT", boolean0);
      player0.Play_Card(cards0, player0, player0);
      assertEquals(0, player0.get_Player_Gold());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player("Market");
      Boolean boolean0 = new Boolean(false);
      Cards cards0 = new Cards("Market", (-75), 0, "", boolean0);
      // Undeclared exception!
      try { 
        player0.Play_Card(cards0, player0, player0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player("========================= ");
      // Undeclared exception!
      try { 
        player0.newHand();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player("");
      int int0 = player0.Get_player_gold_in_hand();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player("jRmBi|");
      player0.Get_Player_Stats();
      assertEquals(0, player0.Get_Player_VP());
      assertEquals(0, player0.get_Player_Gold());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player("UnYj'&P7*i8(Ue!(gL");
      // Undeclared exception!
      try { 
        player0.safeActionDraw();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player("Market");
      int int0 = player0.get_Player_Gold();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player((String) null);
      List<Cards> list0 = player0.get_PlayHand();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player("jRmBi|");
      List<Cards> list0 = player0.GetDeck();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player("UnYj'&P7*i8(Ue!(gL");
      List<Cards> list0 = player0.getDiscard();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Cards> linkedList0 = new LinkedList<Cards>();
      Player.shuffle(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player("ZzZO");
      int int0 = player0.Get_Player_VP();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player((String) null);
      String string0 = player0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player("jRmBi|");
      // Undeclared exception!
      try { 
        player0.Hand_To_Discard((-2359));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player((String) null);
      String string0 = player0.toString();
      assertEquals("null| Victory Points: 0| Gold: 0", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player((String) null);
      // Undeclared exception!
      try { 
        player0.Draw((-335));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
