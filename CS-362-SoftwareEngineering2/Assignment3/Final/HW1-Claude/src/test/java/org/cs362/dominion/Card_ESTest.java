/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 16 00:03:10 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card.Type[] card_TypeArray0 = Card.Type.values();
      assertNotNull(card_TypeArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Card.Type.valueOf(" \tDuchy-VICTORY \t\t Cost: 4 \t\t Score: -1389 \tTreasure Value: -1389");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type. \tDuchy-VICTORY \t\t Cost: 4 \t\t Score: -1389 \tTreasure Value: -1389
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      assertNotNull(card_CardNameArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.valueOf("Province");
      assertEquals(Card.CardName.Province, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card card0 = Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, "Mine: trash a treasure card, gain a treasure card costing up to 3 coins more");
      player0.hand = list0;
      card0.play(player0, (GameState) null);
      assertEquals(19, list0.size());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 3627, 3627, 3627);
      PriorityQueue<Card> priorityQueue0 = new PriorityQueue<Card>();
      Vector<Card> vector0 = new Vector<Card>((Collection<? extends Card>) priorityQueue0);
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "Discard: ");
      player0.discard(card0);
      card0.play(player0, gameState0);
      assertEquals(3627, card0.score());
      assertEquals(3627, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Council_room;
      Card card0 = Card.getCard(list0, card_CardName0);
      int int0 = card0.score();
      assertEquals(0, int0);
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.Type card_Type0 = Card.Type.CURSE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1852), 2264, 2212);
      int int0 = card0.score();
      assertEquals(2212, card0.getTreasureValue());
      assertEquals(2264, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card card0 = Card.getCard(list0, card_CardName0);
      int int0 = card0.getTreasureValue();
      assertEquals(0, int0);
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1429), 0, (-1429));
      int int0 = card0.getTreasureValue();
      assertEquals(0, card0.score());
      assertEquals((-1429), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card card0 = Card.getCard(list0, card_CardName0);
      assertEquals(-1, card0.score());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Cooper;
      GameState gameState0 = new GameState(list0);
      Card card0 = Card.getCard(gameState0.cards, card_CardName0);
      assertEquals(1, card0.getTreasureValue());
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.TREASURE;
      TreeSet<Card> treeSet0 = new TreeSet<Card>();
      List<Card> list0 = Card.filter(treeSet0, card_Type0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card card0 = Card.getCard(list0, card_CardName0);
      int int0 = card0.cost(card0);
      assertEquals(0, card0.getTreasureValue());
      assertEquals(3, int0);
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-553), (-553), (-553));
      int int0 = card0.cost(card0);
      assertEquals((-553), int0);
      assertEquals(-553, card0.score());
      assertEquals(-553, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 868, 868, 868);
      Card.CardName card_CardName1 = Card.CardName.Village;
      Card card1 = new Card(card_CardName1, card_Type0, 868, 0, 0);
      int int0 = card1.compareTo(card0);
      assertEquals(868, card0.score());
      assertEquals(0, card1.getTreasureValue());
      assertEquals(4, int0);
      assertEquals(868, card0.getTreasureValue());
      assertEquals(0, card1.score());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card card0 = Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Province;
      Card card1 = Card.getCard(list0, card_CardName1);
      int int0 = card1.compareTo(card0);
      assertEquals(0, card1.getTreasureValue());
      assertEquals(6, card1.score());
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Province;
      // Undeclared exception!
      try { 
        Card.getCard((List<Card>) null, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.ACTION;
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 2408, (-1119), 2408);
      // Undeclared exception!
      try { 
        card0.compareTo((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 2408, (-1119), 2408);
      boolean boolean0 = card0.equals(card_CardName0);
      assertEquals(-1119, card0.score());
      assertFalse(boolean0);
      assertEquals(2408, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card card0 = Card.getCard(list0, card_CardName0);
      boolean boolean0 = card0.equals(card0);
      assertTrue(boolean0);
      assertEquals(0, card0.getTreasureValue());
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card card0 = Card.getCard(arrayList0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, (-5202), 0);
      card0.getType();
      assertEquals(0, card0.getTreasureValue());
      assertEquals(-5202, card0.score());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, (-5202), 0);
      int int0 = card0.cost(card0);
      assertEquals(-5202, card0.score());
      assertEquals(0, card0.getTreasureValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 4, (-1389), (-1389));
      card0.getCardName();
      assertEquals(-1389, card0.getTreasureValue());
      assertEquals(-1389, card0.score());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 868, 868, 868);
      card0.compareTo(card0);
      assertEquals(868, card0.score());
      assertEquals(868, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_room;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 7, 0, 7);
      int int0 = card0.getTreasureValue();
      assertEquals(0, card0.score());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 4, (-1389), (-1389));
      int int0 = card0.score();
      assertEquals((-1389), int0);
      assertEquals(-1389, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.CURSE;
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.filter(list0, card_Type0);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 18, 18, 18);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      arrayList0.add(card0);
      Player player0 = new Player(gameState0, "u+cpy}%1w:D");
      card0.play(player0, gameState0);
      assertEquals(18, card0.getTreasureValue());
      assertEquals(18, card0.score());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card card0 = Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, " \tGardens-ACTION \t\t Cost: 4 \t\t Score: 0 \tTreasure Value: 0");
      player0.deck = list0;
      card0.play(player0, (GameState) null);
      assertEquals(0, card0.score());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card card0 = Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "H yp7l}0OuKY.<");
      player0.hand = list0;
      card0.play(player0, gameState0);
      assertEquals(0, card0.getTreasureValue());
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card card0 = Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, " \tEmbargo-ACTION \t\t Cost: 2 \t\t Score: 0 \tTreasure Value: 0");
      player0.hand = list0;
      card0.play(player0, (GameState) null);
      assertEquals(19, list0.size());
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, " to draw FIVE cards");
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card card0 = Card.getCard(list0, card_CardName0);
      player0.discard(card0);
      Card card1 = player0.drawCard();
      card1.play(player0, gameState0);
      assertEquals(0, card1.getTreasureValue());
      assertEquals(0, card1.score());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Random.setNextRandom((-9));
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, " to draw FIVE cards");
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card card0 = Card.getCard(list0, card_CardName0);
      assertNotNull(card0);
      
      card0.play(player0, gameState0);
      assertEquals(0, card0.score());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card card0 = Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, " \tAdventurer-ACTION \t\t Cost: 6 \t\t Score: 0 \tTreasure Value: 0");
      player0.deck = list0;
      card0.play(player0, (GameState) null);
      card0.play(player0, (GameState) null);
      assertEquals(0, list0.size());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 2408, (-1119), 2408);
      card0.play((Player) null, (GameState) null);
      assertEquals(-1119, card0.score());
      assertEquals(2408, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Great_hall;
      Card card0 = Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " \tGreat_hall-ACTION \t\t Cost: 3 \t\t Score: 0 \tTreasure Value: 0");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.CURSE;
      Card card0 = new Card(card_CardName0, card_Type0, 1254, 1254, 1254);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "R%IXe,0#65s~1]\"P*");
      card0.play(player0, gameState0);
      assertEquals(1254, card0.score());
      assertEquals(1254, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Card.CardName card_CardName0 = Card.CardName.Council_room;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 13, (-845), 14);
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      // Undeclared exception!
      try { 
        card0.play((Player) null, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Salvager;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 6, (-538), 60);
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "$QvTQ0A&[!J40#p`[\u0003");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card card0 = Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      // Undeclared exception!
      try { 
        card0.play((Player) null, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card card0 = Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, "Mine: trash a treasure card, gain a treasure card costing up to 3 coins more");
      // Undeclared exception!
      try { 
        card0.play(player0, (GameState) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card card0 = Card.getCard(list0, card_CardName0);
      assertNotNull(card0);
      
      String string0 = card0.toString();
      assertEquals(" \tAmbassador-ACTION \t\t Cost: 3 \t\t Score: 0 \tTreasure Value: 0", string0);
  }
}
